// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../prisma/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  username      String         @unique
  password      String
  boards        Board[]        // Owned boards
  sessions      Session[]
  memberships   BoardMember[]  // Boards the user belongs to
}

model Session {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  token      String   @unique
  createdAt  DateTime @default(now())
  expiresAt  DateTime
}

model Board {
  id          String         @id @default(uuid())
  title       String
  description String?
  user        User           @relation(fields: [userId], references: [id])
  userId      String
  tasks       Task[]
  members     BoardMember[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model BoardMember {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId   String
  role      BoardRole @default(VIEWER)
  createdAt DateTime  @default(now())

  @@unique([userId, boardId]) // prevent duplicates
}

enum BoardRole {
  OWNER
  EDITOR
  VIEWER
}

model Task {
  id        String   @id @default(uuid())
  title     String
  status    String
  dueDate   DateTime?
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}